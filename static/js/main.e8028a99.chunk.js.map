{"version":3,"sources":["Store/GetUserSlice.js","Store/PostUserSlice.js","UseList.jsx","App.js","Store/Store.js","index.js"],"names":["fetchUserList","createAsyncThunk","res","fetch","method","json","GetUserSlice","createSlice","name","initialState","theme","isLoading","userList","errorMsg","reducers","changeTheme","state","extraReducers","pending","fulfilled","action","updatedData","payload","data","map","each","id","firstName","first_name","lastName","last_name","avatar","rejected","getUserActions","actions","updateData","userDetails","options","body","JSON","stringify","updateSlice","msg","UserList","useState","setFirstName","setLastName","email","setEmail","dispatch","useDispatch","useEffect","userData","useSelector","getUser","updateInfo","postUser","background","fontColor","Nav","className","onClick","style","backgroundColor","color","Table","bordered","hover","Image","src","roundedCircle","height","Card","border","Form","onSubmit","e","preventDefault","Group","Label","Control","value","onChange","target","type","Button","App","store","configureStore","reducer","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.e8028a99.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchUserList = createAsyncThunk(\"userList/get\", async () => {\r\n  const api = \"https://reqres.in/api/users\";\r\n  const options = {\r\n    method: \"GET\"\r\n  };\r\n  const res = fetch(api, options);\r\n  return (await res).json();\r\n});\r\n\r\nconst GetUserSlice = createSlice({\r\n  name: \"userList\",\r\n  initialState: {\r\n    theme: false,\r\n    isLoading: false,\r\n    userList: [],\r\n    errorMsg: \"\"\r\n  },\r\n  reducers: {\r\n    changeTheme(state) {\r\n      state.theme = !state.theme;\r\n    }\r\n  },\r\n  extraReducers: {\r\n    [fetchUserList.pending]: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    [fetchUserList.fulfilled]: (state, action) => {\r\n      const updatedData = action.payload.data.map((each) => ({\r\n        id: each.id,\r\n        firstName: each.first_name,\r\n        lastName: each.last_name,\r\n        avatar: each.avatar\r\n      }));\r\n\r\n      state.isLoading = false;\r\n      state.userList = updatedData;\r\n    },\r\n    [fetchUserList.rejected]: (state, action) => {\r\n      state.errorMsg = \"error while fetching\";\r\n      state.isLoading = false;\r\n    }\r\n  }\r\n});\r\n\r\nexport const getUserActions = GetUserSlice.actions;\r\nexport default GetUserSlice;\r\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const updateData = createAsyncThunk(\r\n  \"updateData/post\",\r\n  async (userDetails) => {\r\n    const api = \"https://reqres.in/api/users\";\r\n    const options = {\r\n      method: \"POST\",\r\n      body: JSON.stringify(userDetails)\r\n    };\r\n    const res = fetch(api, options);\r\n    return (await res).json();\r\n  }\r\n);\r\n\r\nconst updateSlice = createSlice({\r\n  name: \"userUpdation\",\r\n  initialState: {\r\n    msg: \"\"\r\n  },\r\n  extraReducers: {\r\n    [updateData.pending]: () => {},\r\n    [updateData.fulfilled]: (state, action) => {\r\n      state.msg = `user created successfully with Id : ${action.payload.id} `;\r\n    },\r\n    [updateData.rejected]: () => {}\r\n  }\r\n});\r\n\r\nexport default updateSlice;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Nav, Table, Image, Form, Card, Button } from \"react-bootstrap\";\r\nimport { BsLightbulbFill, BsLightbulb } from \"react-icons/bs\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchUserList, getUserActions } from \"./Store/GetUserSlice\";\r\nimport { updateData } from \"./Store/PostUserSlice\";\r\n\r\nexport default function UserList() {\r\n  // usestates for controlling the form feilds\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    // initial disptach for getting userList data from api and assign the payload to list\r\n    dispatch(fetchUserList());\r\n  }, [dispatch]);\r\n  const userData = useSelector((state) => state.getUser);\r\n  const updateInfo = useSelector((state) => state.postUser);\r\n\r\n  /*userdata is of usersList  and updateInfo is of udpated status of user*/\r\n\r\n  const { theme, userList } = userData;\r\n  const { msg } = updateInfo;\r\n\r\n  const background = theme ? \"black\" : \"white\";\r\n  const fontColor = theme ? \"white\" : \"black\";\r\n\r\n  const addUserForm = (e) => {\r\n    //form for updation\r\n    e.preventDefault();\r\n    if (firstName && lastName) {\r\n      dispatch(\r\n        updateData({ first_name: firstName, last_name: lastName, email })\r\n      );\r\n    }\r\n    setFirstName(\"\");\r\n    setLastName(\"\");\r\n    setEmail(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Nav className=\"d-flex justify-content-between align-items-center bg-primary p-1\">\r\n        <h1 className=\"text-white\">UserList</h1>\r\n        {/* theme changer */}\r\n        {theme ? (\r\n          <BsLightbulb\r\n            className=\"icon\"\r\n            onClick={() => dispatch(getUserActions.changeTheme())}\r\n          />\r\n        ) : (\r\n          <BsLightbulbFill\r\n            className=\"icon\"\r\n            onClick={() => dispatch(getUserActions.changeTheme())}\r\n          />\r\n        )}\r\n      </Nav>\r\n      <div\r\n        className=\"bgContainer d-flex flex-column flex-md-row\"\r\n        style={{ backgroundColor: background, color: fontColor }}\r\n      >\r\n        {/* table is for representing userList in ui */}\r\n        <Table\r\n          bordered\r\n          hover\r\n          style={{ color: fontColor }}\r\n          className=\"table m-2\"\r\n        >\r\n          <thead>\r\n            <tr>\r\n              <th className=\"text-center\">Profiles</th>\r\n              <th>First Name</th>\r\n              <th>Last Name</th>\r\n              <th>Email</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {userList.map((each) => (\r\n              <tr key={each.id}>\r\n                <td className=\"d-flex justify-content-center align-items-center\">\r\n                  <Image\r\n                    src={each.avatar}\r\n                    roundedCircle\r\n                    style={{ height: \"58px\" }}\r\n                  />\r\n                </td>\r\n                <td>{each.firstName}</td>\r\n                <td>{each.lastName}</td>\r\n                <td>\r\n                  {each.firstName}\r\n                  <br className=\"d-md-none\" />\r\n                  {each.lastName}\r\n                  <br className=\"d-md-none\" />\r\n                  @gmail\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n        <Card\r\n          className=\"p-2 m-3 form\"\r\n          style={{ backgroundColor: background, border: \"1px solid gray\" }}\r\n        >\r\n          {/* Form for updation of user into server with it will validate only if feilds are not empty */}\r\n\r\n          <Form style={{ color: fontColor }} onSubmit={addUserForm}>\r\n            <Form.Group className=\"p-1\">\r\n              <Form.Label>First Name</Form.Label>\r\n              <Form.Control\r\n                value={firstName}\r\n                onChange={(e) => setFirstName(e.target.value)}\r\n                type=\"text\"\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"p-1\">\r\n              <Form.Label>Last Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={lastName}\r\n                onChange={(e) => setLastName(e.target.value)}\r\n              />\r\n            </Form.Group>{\" \"}\r\n            <Form.Group className=\"p-1\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            {/* msg is noting but status of updation with unqiue id we from api as response */}\r\n            <p className=\"text-success\">{msg}</p>\r\n            <Button type=\"submit\" className=\"mt-2 m-1\">\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </Card>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport UserList from \"./UseList\";\nimport \"./styles.css\";\n\nexport default function App() {\n  return <UserList />;\n}\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport GetUserSlice from \"./GetUserSlice\";\r\nimport updateSlice from \"./PostUserSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    getUser: GetUserSlice.reducer,\r\n    postUser: updateSlice.reducer\r\n  }\r\n});\r\nexport default store;\r\n","import { createRoot } from \"react-dom/client\";\nimport { StrictMode } from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport store from \"./Store/Store\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </StrictMode>\n);\n"],"sourceRoot":""}